#include <cstdio>
#include <cmath>
#include <new>
#include "collision.h"
#include "common.h"
using namespace std;

double fragments_2D[COLLIDE2D_BODIES * 2] = {
	-0.205604646759568224693193969093, -0.767326987978960342923041692002, 
	 0.205604646759568224693193969093, -0.767326987978960342923041692002, 
	-0.561722341219392118229847722909, -0.561722341219392118229847722909, 
	 0.561722341219392118229847722909, -0.561722341219392118229847722909, 
	-0.205604646759568224693193969093, -0.356117694459823893536653753817, 
	 0.205604646759568224693193969093, -0.356117694459823893536653753817, 
	-0.767326987978960342923041692002, -0.205604646759568224693193969093, 
	 0.767326987978960342923041692002, -0.205604646759568224693193969093, 
	-0.411209293519136449386387938185, 0.000000000000000000000000000000, 
	 0.000000000000000000000000000000, 0.000000000000000000000000000000, 
	 0.411209293519136449386387938185, 0.000000000000000000000000000000, 
	-0.767326987978960342923041692002, 0.205604646759568224693193969093, 
	 0.767326987978960342923041692002, 0.205604646759568224693193969093, 
	-0.205604646759568224693193969093, 0.356117694459823893536653753817, 
	 0.205604646759568224693193969093, 0.356117694459823893536653753817, 
	-0.561722341219392118229847722909, 0.561722341219392118229847722909, 
	 0.561722341219392118229847722909, 0.561722341219392118229847722909, 
	-0.205604646759568224693193969093, 0.767326987978960342923041692002, 
	 0.205604646759568224693193969093, 0.767326987978960342923041692002
};

double fragments_3D[COLLIDE3D_BODIES * 3] = {
	-0.064692580510333, -0.227367785699367, -0.721754518346831, 
	 0.155044992599041,  0.266304903205048, -0.694156735543134, 
	-0.317095310290072,  0.178409717572859, -0.666656854437575, 
	 0.401604772495936, -0.160517886133679, -0.624306366810917, 
	-0.500313471122406, -0.240849042123633, -0.518159236357476, 
	-0.135326329271297,  0.579147972561844, -0.472318997272443, 
	-0.184928420918702, -0.594433519295467, -0.435041486499283, 
	 0.294491801134717, -0.573306784063554, -0.401752081652505, 
	 0.442509601260946,  0.487707481085997, -0.378335156158683, 
	-0.557034363338699,  0.406806515121933, -0.317855316166310, 
	 0.690514633756680,  0.061444789022375, -0.310201391310325, 
	 0.213316314989121,  0.082684113068375, -0.253377730658765, 
	-0.263854474273305,  0.041413648019678, -0.208622179944939, 
	-0.740252467267229, -0.012452209116143, -0.169357763016327, 
	 0.643057975404447, -0.382344717951184, -0.130766133324145, 
	-0.591643842276814, -0.465045353244369, -0.102475402037429, 
	 0.134596319858639,  0.739626870995225, -0.107920095826996, 
	 0.019936018740999, -0.328578602392417, -0.090440271684608, 
	-0.343140510102311,  0.677317300484360,  0.017512552420789, 
	-0.215602912092589, -0.726912357941281,  0.043870637907673, 
	 0.263952368744043, -0.708011633970135,  0.076547357226324, 
	 0.614826152189001,  0.440606573922008,  0.068304277334319, 
	-0.019936024085627,  0.328578601407052,  0.090440274961104, 
	-0.662277539848019,  0.341470369692672,  0.146960101850091, 
	 0.741843576255995, -0.013771867497807,  0.162139658117085, 
	 0.263854475564062, -0.041413646433082,  0.208622175339905, 
	-0.213316313872574, -0.082684108610499,  0.253377726844042, 
	-0.683113909149569, -0.183421025020955,  0.276627799412213, 
	 0.540009385290739, -0.413405611136975,  0.338077637798432, 
	 0.264116530991623,  0.625127836032661,  0.340981629087346, 
	-0.361503260912182, -0.500421862232284,  0.442384648073160, 
	-0.213485390302358,  0.560592246970061,  0.465801615997079, 
	 0.517338363128234,  0.247448103022253,  0.497937023174089, 
	 0.112143909198035, -0.554709181367555,  0.506490170129000, 
	-0.482611245734258,  0.173232276278242,  0.560256895225103, 
	 0.315504215846900, -0.152185647707927,  0.673874946199618, 
	 0.083912096760781,  0.268242062847637,  0.705560614290110, 
	-0.162445715463334, -0.144328663508512,  0.727730342309869
};


int FragmentBody(Body *body, MemoryManager<Body> *bodies, int ndim) {
    double radius;
    double mass;
    double pos[3];
    int idx, i;

    radius = body->radius * (ndim == 2 ? COLLIDE2D_INSIDE_RADIUS : COLLIDE3D_INSIDE_RADIUS);
    mass = body->mass * (ndim == 2 ? COLLIDE2D_INSIDE_MASS : COLLIDE3D_INSIDE_MASS);

    for (idx = 0; idx < (ndim == 2 ? COLLIDE2D_BODIES : COLLIDE3D_BODIES); idx++) {
        for (i = 0; i < ndim; i++) {
            pos[i] = body->pos[i] + radius * (ndim == 2 ? fragments_2D : fragments_3D)[idx * 2 + i];
        }
        //smallBody = bodyBuffer + idx;
        //new ((void *)smallBody) Body(&(pos[0]), mass, radius, ndim);
        new (bodies->AddElementIndex()) Body(&(pos[0]), mass, radius, ndim);
    }
    return 0;
}

bool BodiesCollide(Body *b1, Body *b2, int ndim, double *d) {
    int i;
    for (i = 0; i < ndim; i++) {
        *d += (b1->pos[i] - b2->pos[i]) * (b1->pos[i] - b2->pos[i]);
    }
    *d = sqrt(*d);
    if (*d < b1->radius + b2->radius) {
        return true;
    }
    return false;
}

int UpdateElastic(Body *b1, Body *b2, int ndim, double *d) {
    double midpt;
    double norm[3];
    double p = 0;
    int i;
    // Calculate midpoint
    for (i = 0; i < ndim; i++) {
        midpt = (b1->pos[i] * b1->radius + b2->pos[i] * b2->radius) / (b1->radius + b2->radius);
        b1->pos[i] = midpt + b1->radius * (b1->pos[i] - b2->pos[i]) / *d;
        norm[i] = (b2->pos[i] - b1->pos[i]) / *d;
        p += (b1->pos[i] * norm[i] - b2->pos[i] * norm[i]); 
    }

    p *= 2 / (b1->mass + b2->mass);

    for (i = 0; i < ndim; i++) {
        b1->vel[i] = b1->vel[i] - p * b1->mass * norm[i];
        b2->vel[i] = b2->vel[i] - p * b2->mass * norm[i];
    }
    
    return 0;
}
